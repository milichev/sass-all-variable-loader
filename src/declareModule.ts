import * as fs from 'fs';
import * as _ from 'lodash';
import {
  extractVariables,
  VariableMap,
  VariableValue,
} from './extractVariables';
import { LoaderOptions } from './loader';
import packajeJson from '../package.json';

const writeTypes = (
  strings: string[], name: string, value: VariableValue, sub = false,
) => {
  const subExpr = sub ? '  ' : 'const ';
  if (_.isString(value)) {
    strings.push(`  ${subExpr}${name}: string;`);
  } else if (_.isNumber(value)) {
    strings.push(`  ${subExpr}${name}: number;`);
  } else if (_.isBoolean(value)) {
    strings.push(`  ${subExpr}${name}: boolean;`);
  } else if (_.isObjectLike(value)) {
    strings.push(`  ${subExpr}${name}: {`);
    Object.keys(value as VariableMap)
      .forEach(k => {
        writeTypes(strings, k, value![k], true);
      });
    strings.push('  };');
  } else {
  }
};

export interface DeclareModuleOptions extends LoaderOptions {
  destFile?: string;
}

// noinspection JSUnusedGlobalSymbols
export const declareModule = (
  file: string,
  options: DeclareModuleOptions,
): string => {

  const variables = extractVariables(file, options);

  const statements = Object.keys(variables)
    .reduce(
      (strings, name) => {
        const value = variables[name];
        writeTypes(strings, name, value);

        return strings;
      },
      []);

  const result = `/**
 * This file is autogenerated by ${packajeJson.name}.
 */

declare module 'scss/variables.scss' {
${  statements.join('\n')  }
}
`;

  const { destFile } = options;

  if (destFile) {
    fs.writeFileSync(destFile, result);
  }

  return result;
};
